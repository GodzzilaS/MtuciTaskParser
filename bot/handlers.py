import asyncio
import logging
import time
from collections import defaultdict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import CommandHandler, ConversationHandler, ContextTypes

from core.db import insert
from core.models.tasks import create_tasks_bulk
from core.models.users import create_user, select_user, exist
from core.settings import Settings
from services.encryption import EncryptionService
from services.scraper import Scraper
from utils.check_utils import available_or_message, measure_duration
from utils.date_utils import short_date, compact_time
from utils.status_utils import status_emoji

logger = logging.getLogger(__name__)

(
    LEVEL, FORM, FACULTY,
    COURSE, GROUP
) = range(5)
LEVELS = ("–ë–∞–∫–∞–ª–∞–≤–∞—Ä–∏–∞—Ç", "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", "–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç", "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞")
FORMS = ("–û—á–Ω–∞—è", "–û—á–Ω–æ-–∑–∞–æ—á–Ω–∞—è", "–ó–∞–æ—á–Ω–∞—è")
FORMS_MAP = {
    "–ë–∞–∫–∞–ª–∞–≤–∞—Ä–∏–∞—Ç": ["–û—á–Ω–∞—è", "–û—á–Ω–æ-–∑–∞–æ—á–Ω–∞—è", "–ó–∞–æ—á–Ω–∞—è"],
    "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞": ["–û—á–Ω–∞—è", "–û—á–Ω–æ-–∑–∞–æ—á–Ω–∞—è", "–ó–∞–æ—á–Ω–∞—è"],
    "–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç": ["–û—á–Ω–∞—è"],
    "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞": ["–û—á–Ω–∞—è"],
}
FACULTIES_MAP = {
    "–ë–∞–∫–∞–ª–∞–≤–∞—Ä–∏–∞—Ç": {
        "–û—á–Ω–∞—è": [
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "–ö–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–†–∞–¥–∏–æ –∏ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ",
            "–°–µ—Ç–∏ –∏ —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏",
            "–¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –º–∞—Å—Å–æ–≤—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"
        ],
        "–û—á–Ω–æ-–∑–∞–æ—á–Ω–∞—è": [
            "–¶–µ–Ω—Ç—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
        ],
        "–ó–∞–æ—á–Ω–∞—è": [
            "–¶–µ–Ω—Ç—Ä –∑–∞–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞",
            "–¶–µ–Ω—Ç—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
        ]
    },
    "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞": {
        "–û—á–Ω–∞—è": [
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "–ö–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–†–∞–¥–∏–æ –∏ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ",
            "–°–µ—Ç–∏ –∏ —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏",
            "–¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –º–∞—Å—Å–æ–≤—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"
        ],
        "–û—á–Ω–æ-–∑–∞–æ—á–Ω–∞—è": [
            "–¶–µ–Ω—Ç—Ä –∑–∞–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã"
        ],
        "–ó–∞–æ—á–Ω–∞—è": [
            "–¶–µ–Ω—Ç—Ä –∑–∞–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞",
            "–¶–µ–Ω—Ç—Ä –∑–∞–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã"
        ]
    },
    "–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç": {
        "–û—á–Ω–∞—è": ["–ö–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"]
    },
    "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞": {
        "–û—á–Ω–∞—è": ["–û—Ç–¥–µ–ª –∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä—ã"]
    }
}
COURSES = ("–ü–µ—Ä–≤—ã–π", "–í—Ç–æ—Ä–æ–π", "–¢—Ä–µ—Ç–∏–π", "–ß–µ—Ç–≤—ë—Ä—Ç—ã–π", "–ü—è—Ç—ã–π")


def register_handlers(app, keyboard: ReplyKeyboardMarkup):
    settings = Settings()
    encryptor = EncryptionService(settings.ENCRYPTION_KEY)
    scraper = Scraper(settings)

    app.bot_data["scraper"] = scraper

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("login", login(encryptor)))
    app.add_handler(CommandHandler("get_tasks", get_tasks(settings, encryptor, scraper)))
    app.add_handler(CommandHandler("get_timetable", get_timetable(settings, encryptor, scraper)))

    # conv = ConversationHandler(
    #     entry_points=[CommandHandler("configure", start_config)],
    #     states={
    #         LEVEL: [
    #             CallbackQueryHandler(cancel, pattern="^cancel$"),
    #             CallbackQueryHandler(on_level, pattern="^(" + "|".join(LEVELS) + ")$"),
    #         ],
    #         FORM: [
    #             CallbackQueryHandler(cancel, pattern="^cancel$"),
    #             CallbackQueryHandler(on_form, pattern="^(" + "|".join(FORMS) + ")$"),
    #         ],
    #         FACULTY: [
    #             CallbackQueryHandler(cancel, pattern="^cancel$"),
    #             CallbackQueryHandler(on_faculty),
    #         ],
    #         COURSE: [
    #             CallbackQueryHandler(cancel, pattern="^cancel$"),
    #             CallbackQueryHandler(on_course, pattern="^(" + "|".join(COURSES) + ")$"),
    #         ],
    #         GROUP: [
    #             CallbackQueryHandler(cancel, pattern="^cancel$"),
    #             CallbackQueryHandler(on_group),
    #         ],
    #     },
    #     fallbacks=[
    #         CommandHandler("cancel", cancel),
    #     ],
    #     allow_reentry=True,
    # )
    # app.add_handler(conv)


@available_or_message
@measure_duration("start")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    insert("data", {"type": "command", "command": "start", "timestamp": time.time()})
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å LMS, –æ—Ç–ø—Ä–∞–≤—å:\n"
        "/login —Ç–≤–æ–π_–ª–æ–≥–∏–Ω —Ç–≤–æ–π_–ø–∞—Ä–æ–ª—å"
    )


def login(encryptor: EncryptionService):
    """
    /login –ª–æ–≥–∏–∫–∞: —à–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    @available_or_message
    @measure_duration("login")
    async def _login(update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        if len(args) != 2:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
            return

        login_name, pwd = args
        encrypted = encryptor.encrypt(pwd)
        tg_id = update.effective_user.id
        username = update.effective_user.username or ""

        if exist(tg_id):
            user = select_user(tg_id)
            user.mtuci_login = login_name
            user.mtuci_password = encrypted
        else:
            create_user(tg_id, username, login_name, encrypted)

        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    return _login


def get_tasks(settings: Settings, encryptor: EncryptionService, scraper: Scraper):
    """
    /get_tasks –ª–æ–≥–∏–∫–∞: offload –≤ –ø–æ—Ç–æ–∫ Selenium‚Äëscraping,
    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ create_tasks_bulk –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç.
    """

    @available_or_message
    @measure_duration("get_tasks")
    async def _get_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
        tg_id = update.effective_user.id
        user = select_user(tg_id)
        if not user or not user.mtuci_login:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ /login")
            return

        insert("data", {"type": "command", "command": "get_tasks", "timestamp": time.time()})
        pwd = encryptor.decrypt(user.mtuci_password)

        status_msg = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é –∑–∞–¥–∞–Ω–∏—è, —ç—Ç–æ –∑–∞–π–º—ë—Ç –≤—Ä–µ–º—è...")

        def fetch_assignments():
            driver = scraper.init_driver()
            try:
                scraper.login(driver, user.mtuci_login, pwd)
                by_course: dict[str, list[list[str]]] = {}
                for link in scraper.get_course_links(driver):
                    raws = scraper.parse_assignments_from_course(driver, link)
                    for item in raws:
                        course = item[0]
                        by_course.setdefault(course, []).append(item)
                return by_course
            finally:
                scraper.quit_and_clear(driver)

        try:
            assignments_by_course = await asyncio.to_thread(fetch_assignments)
        except:
            assignments_by_course = None
            pass

        if not assignments_by_course:
            await status_msg.edit_text("‚ùå –ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        tasks_data = []
        for course, raws in assignments_by_course.items():
            for item in raws:
                tasks_data.append({
                    "task_link": item[4],
                    "course": course,
                    "task_name": item[1],
                    "open_date": short_date(item[2]) if item[2] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    "due_date": short_date(item[3]) if item[3] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    "response_status": item[5],
                    "grade_status": item[6],
                    "time_left": compact_time(item[7]),
                    "last_change": item[8]
                })

        create_tasks_bulk(tg_id, tasks_data)

        max_len = settings.MAX_MESSAGE_LENGTH
        chunks: list[str] = []
        current = ""
        for course, raws in assignments_by_course.items():
            header = f"\n<b>üéì {course}</b>\n"
            block = ""
            for item in raws:
                grade_emo, resp_emo = status_emoji(item[5], item[6])
                block += (
                    f"<b>üìå {item[1]}</b>\n"
                    f"‚îÉ\n"
                    f"‚î†‚îÄüóì <i>–û—Ç–∫—Ä—ã—Ç–æ:</i> {short_date(item[2]) if item[2] else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"‚î†‚îÄ‚è≥ <i>–°–¥–∞—Ç—å –¥–æ:</i> {short_date(item[3]) if item[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"‚î†‚îÄ{resp_emo} <i>–°—Ç–∞—Ç—É—Å:</i> {item[5]}\n"
                    f"‚î†‚îÄ{grade_emo} <i>–û—Ü–µ–Ω–∫–∞:</i> {item[6].split(':')[-1].strip()}\n"
                    f"‚î†‚îÄ‚è± <i>–û—Å—Ç–∞–ª–æ—Å—å:</i> {compact_time(item[7])}\n"
                    f"‚îñ‚îÄüîó <a href=\"{item[4]}\">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é</a>\n"
                    "<i>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</i>\n\n"
                )

            if len(current) + len(header + block) > max_len:
                chunks.append(current)
                current = header + block
            else:
                current += header + block

        if current:
            chunks.append(current)

        await status_msg.edit_text(chunks[0], parse_mode="HTML", disable_web_page_preview=True)
        for c in chunks[1:]:
            await update.message.reply_text(c, parse_mode="HTML", disable_web_page_preview=True)

    return _get_tasks


def get_timetable(settings: Settings, encryptor, scraper):
    """
    /get_timetable –ª–æ–≥–∏–∫–∞: –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.
    """

    @available_or_message
    @measure_duration("get_timetable")
    async def _get_timetable(update: Update, context: ContextTypes.DEFAULT_TYPE):
        tg_id = update.effective_user.id
        user = select_user(tg_id)

        if not user or not user.mtuci_login:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ /login")
            return

        insert("data", {"type": "command", "command": "get_timetable", "timestamp": time.time()})
        status_msg = await update.message.reply_text(
            "üîÑ –ü–æ–ª—É—á–∞—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è‚Ä¶"
        )

        def _fetch():
            driver = scraper.init_driver()
            try:
                return scraper.get_timetable(
                    driver,
                    user.mtuci_login,
                    encryptor.decrypt(user.mtuci_password)
                )
            except Exception as e:
                print(e)
                pass

        try:
            entries = await asyncio.to_thread(_fetch)
        except Exception:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
            return

        entries = sorted(entries, key=lambda e: (e["date"], e["time_of_lesson"]))

        grouped = defaultdict(lambda: defaultdict(list))
        for e in entries:
            grouped[e['date']][e['time_of_lesson']].append(e)

        chunks: list[str] = []
        current = ""

        for date in sorted(grouped.keys()):
            date_header = f"\nüìÜ *{date}*\n"
            day_block = date_header

            for time_of_lesson in sorted(grouped[date].keys()):
                lessons = grouped[date][time_of_lesson]

                combined = defaultdict(list)
                for e in lessons:
                    key = (e['type'], e['lesson'])
                    combined[key].append((e['teacher'], e['cabinet']))

                for (lesson_type, lesson_name), teachers in combined.items():
                    day_block += f"**{lesson_type}** ({time_of_lesson})\n"
                    day_block += f"‚ñ´Ô∏è *–ü—Ä–µ–¥–º–µ—Ç:* {lesson_name}\n"

                    for teacher, cabinet in teachers:
                        cab = f", {cabinet}" if lesson_type != "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ" else ""
                        day_block += f"‚ñ´Ô∏è *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {teacher}{cab}\n"

                    day_block += "\n"

            if len(current) + len(day_block) > settings.MAX_MESSAGE_LENGTH:
                chunks.append(current.strip())
                current = day_block
            else:
                current += day_block

        if current:
            chunks.append(current.strip())

        await status_msg.edit_text(chunks[0], parse_mode="Markdown")
        for part in chunks[1:]:
            await update.message.reply_text(part, parse_mode="Markdown")

    return _get_timetable


async def start_config(update, context):
    # –®–∞–≥ 1: –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    keyboard = [[InlineKeyboardButton(lvl, callback_data=lvl)] for lvl in LEVELS] + [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    await update.message.reply_text("–®–∞–≥ 1: –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return LEVEL


async def on_level(update, context):
    # –®–∞–≥ 2: –≤—ã–±–æ—Ä —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è
    lvl = update.callback_query.data
    context.user_data['level'] = lvl
    await update.callback_query.answer()

    forms = FORMS_MAP[lvl]
    keyboard = [[InlineKeyboardButton(f, callback_data=f)] for f in forms]
    keyboard += [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]

    await update.callback_query.edit_message_text(
        f"–®–∞–≥ 2: —É—Ä–æ–≤–µ–Ω—å *{lvl}* –≤—ã–±—Ä–∞–Ω.\n–¢–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return FORM


async def on_form(update, context):
    # –®–∞–≥ 3: –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    form = update.callback_query.data
    context.user_data["form"] = form
    await update.callback_query.answer()

    level = context.user_data["level"]
    facs = FACULTIES_MAP.get(level, {}).get(form, [])

    if not facs:
        await update.callback_query.edit_message_text(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è –∏ —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ https://t.me/GodzzilaS.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
            )
        )
        return FORM

    fac_ids = {f"fac_{i}": name for i, name in enumerate(facs)}
    context.user_data["fac_ids"] = fac_ids

    keyboard = [
        [InlineKeyboardButton(name, callback_data=fac_id)]
        for fac_id, name in fac_ids.items()
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    await update.callback_query.edit_message_text(
        f"–®–∞–≥ 3: —Ñ–æ—Ä–º–∞ *{form}*.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return FACULTY


async def on_faculty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –®–∞–≥ 4: –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
    fac_id = update.callback_query.data
    await update.callback_query.answer()

    faculty = context.user_data['fac_ids'].get(fac_id)
    context.user_data['faculty'] = faculty or "‚Äî"

    level = context.user_data['level']
    form = context.user_data['form']

    courses = COURSES_MAP.get(level, {}).get(form, {}).get(faculty, [])

    if not courses:
        await update.callback_query.edit_message_text(
            "‚ö†Ô∏è –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è, —Ñ–æ—Ä–º—ã –∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∫—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ https://t.me/GodzzilaS.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
            )
        )
        return FACULTY

    keyboard = [[InlineKeyboardButton(c, callback_data=c)] for c in courses]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    await update.callback_query.edit_message_text(
        f"–®–∞–≥ 4: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç *{faculty}*.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return COURSE


async def on_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –®–∞–≥ 5: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    context.user_data['course'] = update.callback_query.data
    await update.callback_query.answer()

    scraper: Scraper = context.bot_data["scraper"]
    lvl = context.user_data['level']
    form = context.user_data['form']
    faculty = context.user_data['faculty']
    course = context.user_data['course']

    waiting_msg = "‚è≥ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    await update.callback_query.edit_message_text(waiting_msg)

    # ‚îÄ‚îÄ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fetch():
        logger.info(f"{lvl}, {form}, {faculty}, {course}")
        return scraper.get_groups(lvl, form, faculty, course)

    groups = await asyncio.to_thread(_fetch)

    if not groups:
        await update.callback_query.edit_message_text(
            "‚ö†Ô∏è –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ https://t.me/GodzzilaS.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
            )
        )
        return COURSE

    keyboard = [[InlineKeyboardButton(g, callback_data=g)] for g in groups]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    await update.callback_query.edit_message_text(
        f"–ö—É—Ä—Å: *{course}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return GROUP


async def on_group(update, context):
    # –®–∞–≥ 6: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    context.user_data['group'] = update.callback_query.data
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª:\n"
        f"- –£—Ä–æ–≤–µ–Ω—å: *{context.user_data['level']}*\n"
        f"- –§–æ—Ä–º–∞: *{context.user_data['form']}*\n"
        f"- –§–∞–∫—É–ª—å—Ç–µ—Ç: *{context.user_data['faculty']}*\n"
        f"- –ö—É—Ä—Å: *{context.user_data['course']}*\n"
        f"- –ì—Ä—É–ø–ø–∞: *{context.user_data['group']}*",
        parse_mode="Markdown"
    )
    tg_id = update.effective_user.id
    user = select_user(tg_id)
    user.education_level = context.user_data['level']
    user.study_form = context.user_data['form']
    user.faculty = context.user_data['faculty']
    user.course = context.user_data['course']
    user.group = context.user_data['group']
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END
