import asyncio
import logging
import time

from telegram import Update
from telegram.ext import ContextTypes

from core.db import insert
from core.models.tasks import create_tasks_bulk
from core.models.users import select_user
from utils.check_utils import available_or_message, measure_duration
from utils.date_utils import short_date, compact_time
from utils.status_utils import status_emoji

logger = logging.getLogger(__name__)


def get_tasks(settings, encryptor, scraper):
    """
    /get_tasks ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ Selenium, –∑–∞–ø–∏—Å—å –≤ –ë–î –∏ –≤—ã–≤–æ–¥ –≤ —á–∞—Ç.
    """

    @available_or_message
    @measure_duration("get_tasks")
    async def _get_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
        tg_id = update.effective_user.id
        user = select_user(tg_id)
        if not user or not user.mtuci_login:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ /login")
            return

        insert("data", {
            "type": "command",
            "command": "get_tasks",
            "timestamp": time.time()
        })
        pwd = encryptor.decrypt(user.mtuci_password)

        status_msg = await update.message.reply_text(
            "üîÑ –ü–æ–ª—É—á–∞—é –∑–∞–¥–∞–Ω–∏—è, —ç—Ç–æ –∑–∞–π–º—ë—Ç –≤—Ä–µ–º—è..."
        )

        def fetch_assignments():
            driver = scraper.init_driver()
            try:
                scraper.login(driver, user.mtuci_login, pwd)
                by_course: dict[str, list[list[str]]] = {}
                for link in scraper.get_course_links(driver):
                    raws = scraper.parse_assignments_from_course(driver, link)
                    for item in raws:
                        course = item[0]
                        by_course.setdefault(course, []).append(item)
                return by_course
            finally:
                scraper.quit_and_clear(driver)

        try:
            assignments_by_course = await asyncio.to_thread(fetch_assignments)
        except Exception:
            assignments_by_course = None

        if not assignments_by_course:
            await status_msg.edit_text("‚ùå –ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è bulk‚Äë–∑–∞–ø–∏—Å–∏
        tasks_data = []
        for course, raws in assignments_by_course.items():
            for item in raws:
                tasks_data.append({
                    "task_link": item[4],
                    "course": course,
                    "task_name": item[1],
                    "open_date": short_date(item[2]) if item[2] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    "due_date": short_date(item[3]) if item[3] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    "response_status": item[5],
                    "grade_status": item[6],
                    "time_left": compact_time(item[7]),
                    "last_change": item[8]
                })

        create_tasks_bulk(tg_id, tasks_data)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã
        max_len = settings.MAX_MESSAGE_LENGTH
        chunks: list[str] = []
        current = ""
        for course, raws in assignments_by_course.items():
            header = f"\n<b>üéì {course}</b>\n"
            block = ""
            for item in raws:
                grade_emo, resp_emo = status_emoji(item[5], item[6])
                block += (
                    f"<b>üìå {item[1]}</b>\n"
                    f"‚îÉ\n"
                    f"‚î†‚îÄüóì <i>–û—Ç–∫—Ä—ã—Ç–æ:</i> {short_date(item[2]) if item[2] else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"‚î†‚îÄ‚è≥ <i>–°–¥–∞—Ç—å –¥–æ:</i> {short_date(item[3]) if item[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"‚î†‚îÄ{resp_emo} <i>–°—Ç–∞—Ç—É—Å:</i> {item[5]}\n"
                    f"‚î†‚îÄ{grade_emo} <i>–û—Ü–µ–Ω–∫–∞:</i> {item[6].split(':')[-1].strip()}\n"
                    f"‚î†‚îÄ‚è± <i>–û—Å—Ç–∞–ª–æ—Å—å:</i> {compact_time(item[7])}\n"
                    f"‚îñ‚îÄüîó <a href=\"{item[4]}\">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é</a>\n"
                    "<i>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</i>\n\n"
                )
            if len(current) + len(header + block) > max_len:
                chunks.append(current)
                current = header + block
            else:
                current += header + block

        if current:
            chunks.append(current)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
        await status_msg.edit_text(
            chunks[0], parse_mode="HTML", disable_web_page_preview=True
        )
        for c in chunks[1:]:
            await update.message.reply_text(
                c, parse_mode="HTML", disable_web_page_preview=True
            )

    return _get_tasks
